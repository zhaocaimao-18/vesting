{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/MyToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\n\n// 功能点：\n// totalSupply -> 返回总供应量 =》自动更新\n// balanceOf(address) -> 查询地址余额 =》读取mapping\n// transfer(address) -> 实现用户向他人转账 =》检查余额、减少发送者余额、增加接收者余额\n// approve() / allowance() -> 授权别人可以代表我转账 => 使用嵌套映射\n// transferFrom()-> 第三方调用，实现代付 => 检查授权额度和余额\n// mint() -> 自定义函数，铸造代币 =》仅合约 deployer 可调用\n\ncontract MyToken {\n    mapping(address => uint256) balances;\n\n    mapping(address=> mapping(address => uint256)) _allowance;\n\n    address owner;\n\n    string public tokenName;\n\n    string public symbolName;\n\n    uint8 public decimals;\n\n    uint256 public totalSupply;\n\n    error InsufficientBalance(uint256 available, uint256 required);\n    error NotOwner();\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    constructor(string memory _tokenName, string memory _symbolName, uint8 _decimals) {\n        tokenName = _tokenName;\n        symbolName = _symbolName;\n        decimals = _decimals;\n\n        owner = msg.sender;\n    }\n\n    function balanceOf(address input) public view returns(uint256 ) {\n        return balances[input];\n    }\n\n    function transfer(address target, uint256 amount) checkBalance(msg.sender, amount) public returns (bool) {\n        balances[msg.sender] -= amount;\n        balances[target] += amount;\n        emit Transfer(msg.sender, target, amount);\n        return true;\n\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return _allowance[_owner][_spender];\n    }\n\n    function approve(address spender, uint256 amount) public returns (bool) {\n        _allowance[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    modifier checkBalance(address input, uint256 amount) {\n        uint256 balance = balances[input];\n        if (balance < amount) revert InsufficientBalance({\n            available: balance,\n            required: amount\n        });\n        _;\n    }  \n\n    function transferFrom(address from, address to, uint256 amount)  public returns (bool) {\n\n        require(balances[from] >= amount, \"Insufficient balance\");\n        require(_allowance[from][msg.sender] >= amount, \"Not allowed\");\n\n        balances[from] -= amount;\n        balances[to] += amount;\n        _allowance[from][msg.sender] -= amount;\n\n        emit Transfer(from, to, amount);\n        return true;\n\n    }\n\n    function mint(address to, uint256 amount) checkOwner() public returns (bool){\n        balances[to] += amount;\n        totalSupply += amount;\n        emit Transfer(address(0), to, amount); // ERC20 标准建议：铸币视为从 address(0) 转出\n        return true;\n    }\n    modifier checkOwner() {\n        if (msg.sender != owner) revert NotOwner();\n    _;\n    }\n\n}\n"
    },
    "contracts/Vesting.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\ncontract Vesting {\n    address public beneficiary; // 受益人地址\n    IERC20  public token; // ERC20\n    uint256 public totalAmount; // 总额度\n    uint256 public start; //开始时间\n    uint256 public duration; //释放持续时间\n    uint256 public claimed; // 已领取\n\n    event Claimed(address _beneficiary, uint256 amount);\n    constructor(address _beneficiary, uint256 _totalAmount, uint256 _duration, address _tokenAddress) {\n        beneficiary = _beneficiary;\n        token = IERC20(_tokenAddress);       \n        totalAmount = _totalAmount;\n        start = block.timestamp;\n        duration = _duration;\n        claimed = 0;\n    }\n\n\n    function _vestedAmount() internal view  returns (uint256) {\n        if (block.timestamp < start) {\n            return 0;\n        } else if (block.timestamp >= start + duration) {\n            return totalAmount;\n        } else {\n            return (block.timestamp - start)  * totalAmount / duration;\n        }\n    }\n\n    function claim() public returns (bool) {\n        require(beneficiary == msg.sender, \"no permission\");\n        uint256 unreleased = _vestedAmount() - claimed;\n        require(token.balanceOf(address(this)) >= unreleased, \"insufficient balance in contract\");\n\n        require(unreleased > 0, \"nothing to claim\");\n        claimed += unreleased;\n        token.transfer(beneficiary, unreleased);\n        emit Claimed(beneficiary, unreleased);\n        return true;\n    }\n\n    function getClaimableAmount() public view returns (uint256) {\n        return _vestedAmount() - claimed;\n    }\n}\n"
    },
    "contracts/VestingFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./Vesting.sol\";\n\n// | 功能编号 | 名称                         | 必须实现 | 说明                  |\n// | ---- | -------------------------- | ---- | ------------------- |\n// | F1   | constructor(address token) | ✅ 是  | 初始化工厂绑定 token 地址    |\n// | F2   | createVesting(...)         | ✅ 是  | 创建 Vesting 并保存映射    |\n// | F3   | allVestings\\[]             | ✅ 是  | 记录所有部署过的合约          |\n// | F4   | vestingsOf\\[address]       | ✅ 是  | 记录某用户名下的 Vesting 实例 |\n// | F5   | getAllVestings()           | ✅ 是  | 查询所有 Vesting 实例     |\n// | F6   | getVestingsOf(user)        | ✅ 是  | 查询某用户名下所有实例         |\n// | F7   | VestingCreated event       | ✅ 是  | 事件监听支持前端 UI 联动      |\n\n\ncontract VestingFactory is Ownable {\n    IERC20  public token; // ERC20\n    Vesting[] public allVestings;\n\n\n    mapping(address => Vesting[]) public vestingsOf;\n    \n        // 所有出现过的用户（可选，便于查询和聚合）\n    address[] public allUsers;\n\n    event VestingCreated(\n    address indexed creator,\n    address indexed beneficiary,\n    address vesting,\n    uint256 amount,\n    uint256 duration\n);\n\n    constructor(address _tokenAddress) Ownable(msg.sender) {\n        token = IERC20(_tokenAddress);\n    }\n    \n    function createVesting(address _beneficiary, uint256 _totalAmount, uint256 _duration) public onlyOwner {\n        Vesting vesting = new Vesting(_beneficiary, _totalAmount, _duration, address(token));\n\n        vestingsOf[_beneficiary].push(vesting);\n        \n        allVestings.push(vesting);\n\n               // F6: 可选记录用户地址\n        if (vestingsOf[_beneficiary].length == 1) {\n            allUsers.push(_beneficiary);\n        }\n\n        emit VestingCreated(msg.sender, _beneficiary, address(vesting), _totalAmount, _duration);\n    }\n    \n    function getVestingAddressesOf(address user) public view returns (address[] memory) {\n        Vesting[] storage list = vestingsOf[user];\n        address[] memory res = new address[](list.length);\n        for (uint i = 0; i < list.length; i++) {\n            res[i] = address(list[i]);\n        }\n        return res;\n    }\n\n    function getAllVestingAddresses() public view returns (address[] memory) {\n        address[] memory res = new address[](allVestings.length);\n        for (uint i = 0; i < allVestings.length; i++) {\n            res[i] = address(allVestings[i]);\n        }\n        return res;\n    }\n\n    function getAllVestingsLength() public view returns (uint256) {\n        return allVestings.length;\n    }\n\n    function getVestingsOfLength(address user) public view returns (uint256) {\n        return vestingsOf[user].length;\n    }\n\n    function getAllUsers() public view returns (address[] memory) {\n        return allUsers;\n    }\n\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}